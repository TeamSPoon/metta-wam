{"uid":"39516b14d4e3d5b4","name":"DEDUCTIONEQUALTEST.02","historyId":"EQUAL:EQUAL#DEDUCTIONEQUALTEST.02","time":{"start":1728177628000,"stop":1728177628520,"duration":520},"status":"failed","statusMessage":"Test failed: Expected '((, (≞ P (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ S (STV 1 0.1)) (, (≞ P (STV 1 0.1)) (≞ Q (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ (→ P Q) (STV 1 0.5)) (≞ (→ Q R) (STV 1 0.5))) (≞ (→ R S) (STV 1 0.5))))' but got '((≞ (→ P S) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (STV 1 0.5) (STV 1 0.5))) (STV 1 0.5)))))'","statusTrace":"AssertionError: Test failed: Expected '((, (≞ P (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ S (STV 1 0.1)) (, (≞ P (STV 1 0.1)) (≞ Q (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ (→ P Q) (STV 1 0.5)) (≞ (→ Q R) (STV 1 0.5))) (≞ (→ R S) (STV 1 0.5))))' but got '((≞ (→ P S) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (STV 1 0.5) (STV 1 0.5))) (STV 1 0.5)))))'","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://teamspoon.github.io/metta-wam/reports/tests_output/baseline-compat-2024-10-06T00:36:50/tests/extended_compat/hyperon-pln/metta/pln/equal/DeductionEqualTest.metta.html#EQUAL.DEDUCTIONEQUALTEST.02\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (let $PR (, (≞ P (STV 1 0.1)) (≞ Q (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ (→ P Q) (STV 1 0.5)) (≞ (→ Q R) (STV 1 0.5))) (, (≞ P (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ S (STV 1 0.1)) $PR (≞ (→ R S) (STV 1 0.5)))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: ((, (≞ P (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ S (STV 1 0.1)) (, (≞ P (STV 1 0.1)) (≞ Q (STV 1 0.1)) (≞ R (STV 1 0.1)) (≞ (→ P Q) (STV 1 0.5)) (≞ (→ Q R) (STV 1 0.5))) (≞ (→ R S) (STV 1 0.5))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: ((≞ (→ P S) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (deduction-formula ((STV 1 0.1) (STV 1 0.1) (STV 1 0.1) (STV 1 0.5) (STV 1 0.5))) (STV 1 0.5)))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"EQUAL"},{"name":"testClass","value":"EQUAL"},{"name":"package","value":"EQUAL"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"39516b14d4e3d5b4.json","parameterValues":[]}