{"uid":"f86f99f91881caf9","name":"NATTEST.06","historyId":"HOL:HOL#NATTEST.06","time":{"start":1726967987000,"stop":1726967987220,"duration":220},"status":"failed","statusMessage":"Test failed: Expected '((let* (((: $_10400 (plus Z (ZRID_plus $_10448))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10448))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10400) (ZRID_plus $_10448))) (: (Repl0 (EqSym PropZRID_plus) Base_plus) (ZRID_plus Z)) (: (Repl0 (EqSym PropZRID_plus) (EqSym (EqSym Base_plus))) (ZRID_plus Z)) (let (: $_10400 (plus Z (ZRID_plus $_10856))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10856))) kb rb (S (S Z))) (: (Repl0 (EqSym (EqSym Base_plus)) $_10400) (ZRID_plus $_10856))) (: (Repl0 (EqSym (EqStruct1 Base_plus)) (Repl0 (EqSym PropZRID_plus) Base_plus)) (ZRID_plus (plus Z Z))) (let (:...(1512)' but got '()'","statusTrace":"AssertionError: Test failed: Expected '((let* (((: $_10400 (plus Z (ZRID_plus $_10448))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10448))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10400) (ZRID_plus $_10448))) (: (Repl0 (EqSym PropZRID_plus) Base_plus) (ZRID_plus Z)) (: (Repl0 (EqSym PropZRID_plus) (EqSym (EqSym Base_plus))) (ZRID_plus Z)) (let (: $_10400 (plus Z (ZRID_plus $_10856))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10856))) kb rb (S (S Z))) (: (Repl0 (EqSym (EqSym Base_plus)) $_10400) (ZRID_plus $_10856))) (: (Repl0 (EqSym (EqStruct1 Base_plus)) (Repl0 (EqSym PropZRID_plus) Base_plus)) (ZRID_plus (plus Z Z))) (let (:...(1512)' but got '()'","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://teamspoon.github.io/metta-wam/reports/tests_output/baseline-compat-2024-09-22T00:36:13/tests/extended_compat/hyperon-pln/metta/hol/NatTest.metta.html#HOL.NATTEST.06\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (synthesize (: $prf (ZRID_plus $x)) kb rb (fromNumber 3)))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: ((let* (((: $_10400 (plus Z (ZRID_plus $_10448))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10448))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10400) (ZRID_plus $_10448))) (: (Repl0 (EqSym PropZRID_plus) Base_plus) (ZRID_plus Z)) (: (Repl0 (EqSym PropZRID_plus) (EqSym (EqSym Base_plus))) (ZRID_plus Z)) (let (: $_10400 (plus Z (ZRID_plus $_10856))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10856))) kb rb (S (S Z))) (: (Repl0 (EqSym (EqSym Base_plus)) $_10400) (ZRID_plus $_10856))) (: (Repl0 (EqSym (EqStruct1 Base_plus)) (Repl0 (EqSym PropZRID_plus) Base_plus)) (ZRID_plus (plus Z Z))) (let (:...(1512)","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: ()","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"HOL"},{"name":"testClass","value":"HOL"},{"name":"package","value":"HOL"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"f5ac5f4b52944d0f","reportUrl":"https://TeamSPoon.github.io/metta-wam/nightly/281//#testresult/f5ac5f4b52944d0f","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10400 (plus Z (ZRID_plus $_10448))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10448))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10400) (ZRID_plus $_10448))) (: (Repl0 (EqSym PropZRID_plus) Base_plus) (ZRID_plus Z)) (: (Repl0 (EqSym PropZRID_plus) (EqSym (EqSym Base_plus))) (ZRID_plus Z)) (let (: $_10400 (plus Z (ZRID_plus $_10856))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10856))) kb rb (S (S Z))) (: (Repl0 (EqSym (EqSym Base_plus)) $_10400) (ZRID_plus $_10856))) (: (Repl0 (EqSym (EqStruct1 Base_plus)) (Repl0 (EqSym PropZRID_plus) Base_plus)) (ZRID_plus (plus Z Z))) (let (:...(1512)' but got '()'","time":{"start":1726881332000,"stop":1726881332217,"duration":217}},{"uid":"61e6e049b9141d8","reportUrl":"https://TeamSPoon.github.io/metta-wam/nightly/280//#testresult/61e6e049b9141d8","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10400 (plus Z (ZRID_plus $_10448))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10448))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10400) (ZRID_plus $_10448))) (: (Repl0 (EqSym PropZRID_plus) Base_plus) (ZRID_plus Z)) (: (Repl0 (EqSym PropZRID_plus) (EqSym (EqSym Base_plus))) (ZRID_plus Z)) (let (: $_10400 (plus Z (ZRID_plus $_10856))) (synthesize (: $_10400 (plus Z (ZRID_plus $_10856))) kb rb (S (S Z))) (: (Repl0 (EqSym (EqSym Base_plus)) $_10400) (ZRID_plus $_10856))) (: (Repl0 (EqSym (EqStruct1 Base_plus)) (Repl0 (EqSym PropZRID_plus) Base_plus)) (ZRID_plus (plus Z Z))) (let (:...(1512)' but got '()'","time":{"start":1726794991000,"stop":1726794991213,"duration":213}},{"uid":"a8d7603333655b96","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/44//#testresult/a8d7603333655b96","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725589753000,"stop":1725589753000,"duration":0}},{"uid":"53d73e27d1f9a69c","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/43//#testresult/53d73e27d1f9a69c","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725503377000,"stop":1725503377000,"duration":0}},{"uid":"454d8bfb41b60b61","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/42//#testresult/454d8bfb41b60b61","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725416936000,"stop":1725416936000,"duration":0}},{"uid":"d5125db0ecab059e","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/41//#testresult/d5125db0ecab059e","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725330485000,"stop":1725330485000,"duration":0}},{"uid":"bf9e814a3f3e4468","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/40//#testresult/bf9e814a3f3e4468","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725244240000,"stop":1725244240000,"duration":0}},{"uid":"d990efea5fd2b874","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/39//#testresult/d990efea5fd2b874","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725158567000,"stop":1725158567000,"duration":0}},{"uid":"8f45b3114fad7b9f","reportUrl":"https://AdrickTench.github.io/metta-wam/nightly/38//#testresult/8f45b3114fad7b9f","status":"failed","statusDetails":"Test failed: Expected '((let* (((: $_10208 (plus Z (ZRID_plus $_10256))) (synthesize (: $_10208 (plus Z (ZRID_plus $_10256))) kb rb (S (S Z))))) (: (Repl0 Base_plus $_10208) (ZRID_plus $_10256))) (: (Repl0 (EqSym PropZRID_p...' but got '()'","time":{"start":1725071263000,"stop":1725071263000,"duration":0}}]},"tags":[]},"source":"f86f99f91881caf9.json","parameterValues":[]}